/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as TermsRouteImport } from './routes/terms'
import { Route as PrivacyRouteImport } from './routes/privacy'
import { Route as HomeRouteImport } from './routes/home'
import { Route as IndexRouteImport } from './routes/index'
import { ServerRoute as NotionServerRouteImport } from './routes/notion'
import { ServerRoute as ApiAuthCallbackNotionServerRouteImport } from './routes/api.auth.callback/notion'
import { ServerRoute as ApiAuthCallbackGoogleServerRouteImport } from './routes/api.auth.callback/google'
import { ServerRoute as ApiAuthCallbackGithubServerRouteImport } from './routes/api.auth.callback/github'

const rootServerRouteImport = createServerRootRoute()

const TermsRoute = TermsRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyRoute = PrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeRoute = HomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const NotionServerRoute = NotionServerRouteImport.update({
  id: '/notion',
  path: '/notion',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthCallbackNotionServerRoute =
  ApiAuthCallbackNotionServerRouteImport.update({
    id: '/api/auth/callback/notion',
    path: '/api/auth/callback/notion',
    getParentRoute: () => rootServerRouteImport,
  } as any)
const ApiAuthCallbackGoogleServerRoute =
  ApiAuthCallbackGoogleServerRouteImport.update({
    id: '/api/auth/callback/google',
    path: '/api/auth/callback/google',
    getParentRoute: () => rootServerRouteImport,
  } as any)
const ApiAuthCallbackGithubServerRoute =
  ApiAuthCallbackGithubServerRouteImport.update({
    id: '/api/auth/callback/github',
    path: '/api/auth/callback/github',
    getParentRoute: () => rootServerRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/home' | '/privacy' | '/terms'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/home' | '/privacy' | '/terms'
  id: '__root__' | '/' | '/home' | '/privacy' | '/terms'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HomeRoute: typeof HomeRoute
  PrivacyRoute: typeof PrivacyRoute
  TermsRoute: typeof TermsRoute
}
export interface FileServerRoutesByFullPath {
  '/notion': typeof NotionServerRoute
  '/api/auth/callback/github': typeof ApiAuthCallbackGithubServerRoute
  '/api/auth/callback/google': typeof ApiAuthCallbackGoogleServerRoute
  '/api/auth/callback/notion': typeof ApiAuthCallbackNotionServerRoute
}
export interface FileServerRoutesByTo {
  '/notion': typeof NotionServerRoute
  '/api/auth/callback/github': typeof ApiAuthCallbackGithubServerRoute
  '/api/auth/callback/google': typeof ApiAuthCallbackGoogleServerRoute
  '/api/auth/callback/notion': typeof ApiAuthCallbackNotionServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/notion': typeof NotionServerRoute
  '/api/auth/callback/github': typeof ApiAuthCallbackGithubServerRoute
  '/api/auth/callback/google': typeof ApiAuthCallbackGoogleServerRoute
  '/api/auth/callback/notion': typeof ApiAuthCallbackNotionServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths:
    | '/notion'
    | '/api/auth/callback/github'
    | '/api/auth/callback/google'
    | '/api/auth/callback/notion'
  fileServerRoutesByTo: FileServerRoutesByTo
  to:
    | '/notion'
    | '/api/auth/callback/github'
    | '/api/auth/callback/google'
    | '/api/auth/callback/notion'
  id:
    | '__root__'
    | '/notion'
    | '/api/auth/callback/github'
    | '/api/auth/callback/google'
    | '/api/auth/callback/notion'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  NotionServerRoute: typeof NotionServerRoute
  ApiAuthCallbackGithubServerRoute: typeof ApiAuthCallbackGithubServerRoute
  ApiAuthCallbackGoogleServerRoute: typeof ApiAuthCallbackGoogleServerRoute
  ApiAuthCallbackNotionServerRoute: typeof ApiAuthCallbackNotionServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/notion': {
      id: '/notion'
      path: '/notion'
      fullPath: '/notion'
      preLoaderRoute: typeof NotionServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/callback/notion': {
      id: '/api/auth/callback/notion'
      path: '/api/auth/callback/notion'
      fullPath: '/api/auth/callback/notion'
      preLoaderRoute: typeof ApiAuthCallbackNotionServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/callback/google': {
      id: '/api/auth/callback/google'
      path: '/api/auth/callback/google'
      fullPath: '/api/auth/callback/google'
      preLoaderRoute: typeof ApiAuthCallbackGoogleServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/callback/github': {
      id: '/api/auth/callback/github'
      path: '/api/auth/callback/github'
      fullPath: '/api/auth/callback/github'
      preLoaderRoute: typeof ApiAuthCallbackGithubServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HomeRoute: HomeRoute,
  PrivacyRoute: PrivacyRoute,
  TermsRoute: TermsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  NotionServerRoute: NotionServerRoute,
  ApiAuthCallbackGithubServerRoute: ApiAuthCallbackGithubServerRoute,
  ApiAuthCallbackGoogleServerRoute: ApiAuthCallbackGoogleServerRoute,
  ApiAuthCallbackNotionServerRoute: ApiAuthCallbackNotionServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
